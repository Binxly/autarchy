#!/bin/bash

export PATH="$HOME/.local/share/autarchy/bin:$PATH"

menu() {
  local prompt="$1"
  local options="$2"
  local extra="$3"
  local preselect="$4"

  read -r -a args <<<"$extra"

  if [[ -n "$preselect" ]]; then
    local index
    index=$(echo -e "$options" | grep -nxF "$preselect" | cut -d: -f1)
    if [[ -n "$index" ]]; then
      args+=("-a" "$index")
    fi
  fi

  echo -e "$options" | walker --dmenu --theme dmenu_250 -p "$prompt…" "${args[@]}"
}

terminal() {
  alacritty --class Autarchy -e $1
}

present_terminal() {
  alacritty --class Autarchy -e bash -c "autarchy-show-logo; eval \"$1\"; autarchy-show-done;"
}

edit_in_nvim() {
  notify-send "Editing config file" "$1"
  alacritty -e nvim "$1"
}

open_web() {
  setsid chromium --new-window --app="$1" &
}

install() {
  present_terminal "echo 'Installing $1...'; yay -Sy --noconfirm $2"
}

install_and_launch() {
  present_terminal "echo 'Installing $1...'; yay -Sy --noconfirm $2 && setsid gtk-launch $3"
}

install_font() {
  present_terminal "echo 'Installing $1...'; yay -Sy --noconfirm --needed $2 && sleep 2 && autarchy-font-set '$3'"
}

show_learn_menu() {
  case $(menu "Learn" "  Keybindings\n  Autarchy\n  Hyprland\n󰣇  Arch\n  Neovim\n󱆃  Bash") in
  *Keybindings*) autarchy-menu-keybindings ;;
  *Autarchy*) open_web "https://manuals.omamix.org/2/the-autarchy-manual" ;;
  *Hyprland*) open_web "https://wiki.hypr.land/" ;;
  *Arch*) open_web "https://wiki.archlinux.org/title/Main_page" ;;
  *Bash*) open_web "https://devhints.io/bash" ;;
  *Neovim*) open_web "https://www.lazyvim.org/keymaps" ;;
  *) show_main_menu ;;
  esac
}

show_style_menu() {
  case $(menu "Style" "󰸌  Theme\n  Font\n  Background") in
  *Theme*) show_theme_menu ;;
  *Font*) show_font_menu ;;
  *Background*) autarchy-theme-bg-next ;;
  *) show_main_menu ;;
  esac
}

show_theme_menu() {
  theme=$(menu "Theme" "$(autarchy-theme-list)" "" "$(autarchy-theme-current)")
  if [[ "$theme" == "CNCLD" || -z "$theme" ]]; then
    show_main_menu
  else
    autarchy-theme-set "$theme"
  fi
}

show_font_menu() {
  theme=$(menu "Font" "$(autarchy-font-list)" "-w 350" "$(autarchy-font-current)")
  if [[ "$theme" == "CNCLD" || -z "$theme" ]]; then
    show_main_menu
  else
    autarchy-font-set "$theme"
  fi
}

show_capture_menu() {
  case $(menu "Capture" "  Screenshot\n  Screenrecord\n󰃉  Color") in
  *Screenshot*) show_screenshot_menu ;;
  *Screenrecord*) show_screenrecord_menu ;;
  *Color*) pkill hyprpicker || hyprpicker -a ;;
  *) show_main_menu ;;
  esac
}

show_screenshot_menu() {
  case $(menu "Screenshot" "  Region\n  Window\n  Display") in
  *Region*) autarchy-cmd-screenshot ;;
  *Window*) autarchy-cmd-screenshot window ;;
  *Display*) autarchy-cmd-screenshot output ;;
  *) show_capture_menu ;;
  esac
}

show_screenrecord_menu() {
  case $(menu "Screenrecord" "  Region\n  Display") in
  *Region*) autarchy-cmd-screenrecord ;;
  *Display*) autarchy-cmd-screenrecord output ;;
  *) show_capture_menu ;;
  esac
}

show_toggle_menu() {
  case $(menu "Toggle" "󱄄  Screensaver\n󰔎  Nightlight\n󱫖  Idle Lock\n󰍜  Top Bar") in
  *Screensaver*) autarchy-launch-screensaver ;;
  *Nightlight*) autarchy-toggle-nightlight ;;
  *Idle*) autarchy-toggle-idle ;;
  *Bar*) pkill -SIGUSR1 waybar ;;
  *) show_main_menu ;;
  esac
}

show_setup_menu() {
  local options="  Audio\n  Wifi\n󰂯  Bluetooth\n󱐋  Power Profile\n󰍹  Monitors"
  [ -f ~/.config/hypr/bindings.conf ] && options="$options\n  Keybindings"
  [ -f ~/.config/hypr/input.conf ] && options="$options\n  Input"
  options="$options\n  Config\n󰈷  Fingerprint\n  Fido2"

  case $(menu "Setup" "$options") in
  *Audio*) alacritty --class=Wiremix -e wiremix ;;
  *Wifi*) alacritty --class=Impala -e impala ;;
  *Bluetooth*) blueberry ;;
  *Power*) show_setup_power_menu ;;
  *Monitors*) edit_in_nvim ~/.config/hypr/monitors.conf ;;
  *Keybindings*) edit_in_nvim ~/.config/hypr/bindings.conf ;;
  *Input*) edit_in_nvim ~/.config/hypr/input.conf ;;
  *Config*) show_setup_config_menu ;;
  *Fingerprint*) present_terminal autarchy-setup-fingerprint ;;
  *Fido2*) present_terminal autarchy-setup-fido2 ;;
  *) show_main_menu ;;
  esac
}

show_setup_power_menu() {
  profile=$(menu "Power Profile" "$(autarchy-powerprofiles-list)" "" "$(powerprofilesctl get)")

  if [[ "$profile" == "CNCLD" || -z "$profile" ]]; then
    show_main_menu
  else
    powerprofilesctl set "$profile"
  fi
}

show_setup_config_menu() {
  case $(menu "Setup" "  Hyprland\n  Hypridle\n  Hyprlock\n  Hyprsunset\n  Swayosd\n󰌧  Walker\n󰍜  Waybar\n󰞅  XCompose") in
  *Hyprland*) edit_in_nvim ~/.config/hypr/hyprland.conf ;;
  *Hypridle*) edit_in_nvim ~/.config/hypr/hypridle.conf && autarchy-restart-hypridle ;;
  *Hyprlock*) edit_in_nvim ~/.config/hypr/hyprlock.conf ;;
  *Hyprsunset*) edit_in_nvim ~/.config/hypr/hyprsunset.conf && autarchy-restart-hyprsunset ;;
  *Swayosd*) edit_in_nvim ~/.config/swayosd/config.toml && autarchy-restart-swayosd ;;
  *Walker*) edit_in_nvim ~/.config/walker/config.toml && autarchy-restart-walker ;;
  *Waybar*) edit_in_nvim ~/.config/waybar/config.jsonc && autarchy-restart-waybar ;;
  *XCompose*) edit_in_nvim ~/.XCompose && autarchy-restart-xcompose ;;
  *) show_main_menu ;;
  esac
}

show_install_menu() {
  case $(menu "Install" "󰣇  Package\n  Web App\n  Service\n  Style\n󰵮  Development\n  Editor\n󱚤  AI\n  Gaming") in
  *Package*) terminal autarchy-pkg-install ;;
  *Web*) present_terminal autarchy-webapp-install ;;
  *Service*) show_install_service_menu ;;
  *Style*) show_install_style_menu ;;
  *Development*) show_install_development_menu ;;
  *Editor*) show_install_editor_menu ;;
  *AI*) show_install_ai_menu ;;
  *Gaming*) show_install_gaming_menu ;;
  *) show_main_menu ;;
  esac
}

show_install_service_menu() {
  case $(menu "Install" "  Dropbox\n  Tailscale") in
  *Dropbox*) present_terminal autarchy-install-dropbox ;;
  *Tailscale*) present_terminal autarchy-install-tailscale ;;
  *) show_install_menu ;;
  esac
}

show_install_editor_menu() {
  case $(menu "Install" "  VSCode\n  Cursor\n  Zed\n  Sublime Text\n  Helix") in
  *VSCode*) install_and_launch "VSCode" "visual-studio-code-bin" "code" ;;
  *Cursor*) install_and_launch "Cursor" "cursor-bin" "cursor" ;;
  *Zed*) install_and_launch "Zed" "zed" "dev.zed.Zed" ;;
  *Sublime*) install_and_launch "Sublime Text" "sublime-text-4" "sublime_text" ;;
  *Helix*) install "Helix" "helix" ;;
  *) show_install_menu ;;
  esac
}

show_install_ai_menu() {
  case $(menu "Install" "󱚤  Claude Code\n󱚤  Gemini\n󱚤  LM Studio\n󱚤  Ollama\n󱚤  Crush\n󱚤  opencode") in
  *Claude*) install "Claude Code" "claude-code" ;;
  *Gemini*) install "Gemini" "gemini-cli-bin" ;;
  *Studio*) install "LM Studio" "lmstudio" ;;
  *Ollama*) install "Ollama" "ollama" ;;
  *Crush*) install "Crush" "crush-bin" ;;
  *opencode*) install "opencode" "opencode-bin" ;;
  *) show_install_menu ;;
  esac
}

show_install_gaming_menu() {
  case $(menu "Install" "  Steam\n  RetroArch\n󰍳  Minecraft") in
  *Steam*) present_terminal autarchy-install-steam ;;
  *RetroArch*) install_and_launch "RetroArch" "retroarch retroarch-assets libretro libretro-fbneo" "com.libretro.RetroArch.desktop" ;;
  *Minecraft*) install_and_launch "Minecraft" "minecraft-launcher" "minecraft-launcher" ;;
  *) show_install_menu ;;
  esac
}

show_install_style_menu() {
  case $(menu "Install" "󰸌  Theme\n  Background\n  Font") in
  *Theme*) present_terminal autarchy-theme-install ;;
  *Background*) nautilus ~/.config/autarchy/current/theme/backgrounds ;;
  *Font*) show_install_font_menu ;;
  *) show_install_menu ;;
  esac
}

show_install_font_menu() {
  case $(menu "Install" "  Meslo LG Mono\n  Fira Code\n  Victor Code\n  Bistream Vera Mono" "-w 350") in
  *Meslo*) install_font "Meslo LG Mono" "ttf-meslo-nerd" "MesloLGL Nerd Font" ;;
  *Fira*) install_font "Fira Code" "ttf-firacode-nerd" "FiraCode Nerd Font" ;;
  *Victor*) install_font "Victor Code" "ttf-victor-mono-nerd" "VictorMono Nerd Font" ;;
  *Bistream*) install_font "Bistream Vera Code" "ttf-bitstream-vera-mono-nerd" "BitstromWera Nerd Font" ;;
  *) show_install_menu ;;
  esac
}

show_install_development_menu() {
  case $(menu "Install" "󰫏  Ruby on Rails\n  Docker DB\n  JavaScript\n  Go\n  PHP\n  Python\n  Elixir\n  Zig\n  Rust\n  Java\n  .NET\n  OCaml") in
  *Rails*) present_terminal "autarchy-install-dev-env ruby" ;;
  *Docker*) present_terminal autarchy-install-docker-dbs ;;
  *JavaScript*) show_install_javascript_menu ;;
  *Go*) present_terminal "autarchy-install-dev-env go" ;;
  *PHP*) show_install_php_menu ;;
  *Python*) present_terminal "autarchy-install-dev-env python" ;;
  *Elixir*) present_terminal "autarchy-install-dev-env elixir" ;;
  *Zig*) present_terminal "autarchy-install-dev-env zig" ;;
  *Rust*) present_terminal "autarchy-install-dev-env rust" ;;
  *Java*) present_terminal "autarchy-install-dev-env java" ;;
  *NET*) present_terminal "autarchy-install-dev-env dotnet" ;;
  *OCaml*) present_terminal "autarchy-install-dev-env ocaml" ;;
  *) show_install_menu ;;
  esac
}

show_install_javascript_menu() {
  case $(menu "Install" "  Node.js\n  Bun\n  Deno") in
  *Node*) present_terminal "autarchy-install-dev-env node" ;;
  *Bun*) present_terminal "autarchy-install-dev-env bun" ;;
  *Deno*) present_terminal "autarchy-install-dev-env deno" ;;
  *) show_install_development_menu ;;
  esac
}

show_install_php_menu() {
  case $(menu "Install" "  PHP\n  Laravel\n  Symfony") in
  *PHP*) present_terminal "autarchy-install-dev-env php" ;;
  *Laravel*) present_terminal "autarchy-install-dev-env laravel" ;;
  *Symfony*) present_terminal "autarchy-install-dev-env symfony" ;;
  *) show_install_development_menu ;;
  esac
}

show_remove_menu() {
  case $(menu "Remove" "󰣇  Package\n  Web App\n󰸌  Theme\n󰈷  Fingerprint\n  Fido2") in
  *Package*) terminal autarchy-pkg-remove ;;
  *Web*) present_terminal autarchy-webapp-remove ;;
  *Theme*) present_terminal autarchy-theme-remove ;;
  *Fingerprint*) present_terminal "autarchy-setup-fingerprint --remove" ;;
  *Fido2*) present_terminal "autarchy-setup-fido2 --remove" ;;
  *) show_main_menu ;;
  esac
}

show_update_menu() {
  case $(menu "Update" "󰣇  Autarchy\n  Config\n󰸌  Themes\n  Process\n  Timezone") in
  *Autarchy*) present_terminal autarchy-update ;;
  *Config*) show_update_config_menu ;;
  *Themes*) present_terminal autarchy-theme-update ;;
  *Process*) show_update_process_menu ;;
  *Timezone*) autarchy-cmd-tzupdate ;;
  *) show_main_menu ;;
  esac
}

show_update_process_menu() {
  case $(menu "Restart" "  Hypridle\n  Hyprsunset\n  Swayosd\n󰌧  Walker\n󰍜  Waybar") in
  *Hypridle*) autarchy-restart-hypridle ;;
  *Hyprsunset*) autarchy-restart-hyprsunset ;;
  *Swayosd*) autarchy-restart-swayosd ;;
  *Walker*) autarchy-restart-walker ;;
  *Waybar*) autarchy-restart-waybar ;;
  *) show_main_menu ;;
  esac
}

show_update_config_menu() {
  case $(menu "Use default config" "  Hyprland\n  Hypridle\n  Hyprlock\n  Hyprsunset\n󱣴  Plymouth\n  Swayosd\n󰌧  Walker\n󰍜  Waybar") in
  *Hyprland*) present_terminal autarchy-refresh-hyprland ;;
  *Hypridle*) present_terminal autarchy-refresh-hypridle ;;
  *Hyprlock*) present_terminal autarchy-refresh-hyprlock ;;
  *Hyprsunset*) present_terminal autarchy-refresh-hyprsunset ;;
  *Plymouth*) present_terminal autarchy-refresh-plymouth ;;
  *Swayosd*) present_terminal autarchy-refresh-swayosd ;;
  *Walker*) present_terminal autarchy-refresh-walker ;;
  *Waybar*) present_terminal autarchy-refresh-waybar ;;
  *) show_main_menu ;;
  esac
}

show_system_menu() {
  case $(menu "System" "  Lock\n󰤄  Suspend\n  Relaunch\n󰜉  Restart\n󰐥  Shutdown") in
  *Lock*) autarchy-lock-screen ;;
  *Suspend*) systemctl suspend ;;
  *Relaunch*) uwsm stop ;;
  *Restart*) systemctl reboot ;;
  *Shutdown*) systemctl poweroff ;;
  *) show_main_menu ;;
  esac
}

show_main_menu() {
  go_to_menu "$(menu "Go" "󰀻  Apps\n󰧑  Learn\n  Capture\n󰔎  Toggle\n  Style\n  Setup\n󰉉  Install\n󰭌  Remove\n  Update\n  About\n  System")"
}

go_to_menu() {
  case "${1,,}" in
  *apps*) walker -p "Launch…" ;;
  *learn*) show_learn_menu ;;
  *style*) show_style_menu ;;
  *theme*) show_theme_menu ;;
  *capture*) show_capture_menu ;;
  *screenshot*) show_screenshot_menu ;;
  *screenrecord*) show_screenrecord_menu ;;
  *toggle*) show_toggle_menu ;;
  *setup*) show_setup_menu ;;
  *install*) show_install_menu ;;
  *remove*) show_remove_menu ;;
  *update*) show_update_menu ;;
  *system*) show_system_menu ;;
  *about*) gtk-launch About.desktop ;;
  esac
}

if [[ -n "$1" ]]; then
  go_to_menu "$1"
else
  show_main_menu
fi
